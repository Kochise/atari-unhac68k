; /////////////////////////////////////////
; /// UnHac68K Video Module - KOSS 1998 ///
; /////////////////////////////////////////

	SECTION	TEXT
	
	movea.l	4(SP),A6		; Adresse de la BasePage
	move.l	$C(A6),D0		; Taille du SEGMENT TEXT
	add.l	$14(A6),D0		; Additionne la taille du SEGMENT DATA … D0
	add.l	$1C(A6),D0		; Additionne la taille du SEGMENT BSS … D0
	addi.l	#$100,D0		; Additionne la taille de la BasePage … D0
	addi.l	#$400,D0		; Additionne la taille de la future PILE (Ici, 256 mots longs (1 Ko))
	move.l	D0,D1		; Copie D0 dans D1 (Taille … r‚server)
	add.l	A6,D1		; Additionne l'adresse du d‚but du programme avec D1 (La taille … r‚server)
	andi.l	#-2,D1		; Rend D1 pair (Au cas o— il ne l'‚tait pas)
	movea.l	D1,SP		; Installe l'adresse de fin du programme+place nouvelle PILE dans la PILE
	move.l	A6,4(SP)		; Adresse de la BasePage
	move.l	D0,-(SP)		; EmPILE la taille … reserver	\
	move.l	A6,-(SP)		; EmPILE l'adresse du programme |-> Rend le reste de la m‚moire au systŠme
	clr.w	-(SP)		; R‚serv‚                       |
	move.w	#$4A,-(SP)		; - M_SHRINK -                  |
	trap	#1		; *** GEMDOS ***                /
	lea	(12,SP),SP

	move.w	#-1,-(SP)
	move.w	#88,-(SP)		; - VSETMODE -
	trap	#14		; *** XBIOS ***
	addq.l	#4,SP
	
	move.w	D0,Old_Mode
	
	move.w	#%100110100,-(SP)	; 320/240/TC
	move.w	#3,-(SP)
	clr.l	-(SP)
	clr.l	-(SP)
	move.w	#5,-(SP)		; - VSETSCREEN -
	trap	#14		; *** XBIOS ***
	lea	(14,SP),SP

	move.w	#2,-(SP)		; - PHYSBASE -
	trap	#14		; *** XBIOS ***
	addq.l	#2,SP
	
	move.l	D0,Screen_Addr

; /// Pour commencer, on remplit tout ///

	move.w	#319,XAff
	move.w	#239,YAff
	clr.l	MAff

; /// Affichage du bintz … l'‚cran ///
	
Video_Exp	BSR	Memory_Aff

; /// Boucle de saisie ///
	
Key_Slot	move.w	#7,-(SP)		; - C_RAWCIN -
	trap	#1		; *** GEMDOS ***
	addq.l	#2,SP
	
	swap	D0
	
	cmpi.w	#1,D0		; Esc
	BEQ	Restore
	cmpi.w	#$39,D0		; Space
	BEQ	Save_Pict
	cmpi.w	#$48,D0		; Up Arrow
	BEQ	Up_Line
	cmpi.w	#$4A,D0		; -
	BEQ	Up_2Line
	cmpi.w	#$4B,D0		; Left Arrow
	BEQ	Up_Pixel
	cmpi.w	#$4D,D0		; Right Arrow
	BEQ	Down_Pixel
	cmpi.w	#$4E,D0		; +
	BEQ	Down_2Line
	cmpi.w	#$50,D0		; Down Arrow
	BEQ	Down_Line
	cmpi.w	#$63,D0		; (
	BEQ	Up_2Pixel
	cmpi.w	#$64,D0		; )
	BEQ	Down_2Pixel
	cmpi.w	#$68,D0		; 8 PN
	BEQ	Sub_AffLine
	cmpi.w	#$6A,D0		; 4 PN
	BEQ	Sub_AffPixel
	cmpi.w	#$6C,D0		; 6 PN
	BEQ	Add_AffPixel
	cmpi.w	#$6E,D0		; 2 PN
	BEQ	Add_AffLine
	cmpi.w	#$73,D0		; Control + Left Arrow
	BEQ	Up_HPixel
	cmpi.w	#$74,D0		; Control + Right Arrow
	BEQ	Donw_HPixel
	
	BRA	Key_Slot
	
; /// On remonte d'une ligne M+X ///
	
Up_Line	move.w	XAff,D0
	addq.l	#1,D0
	mulu.w	#2,D0
	move.l	MAff,D1
	add.l	D0,D1
	move.l	D1,MAff

	pea	Video_Exp
	RTS
	
; /// On remonte de deux lignes M+2X ///
	
Up_2Line	move.w	XAff,D0
	addq.l	#1,D0
	mulu.w	#4,D0
	move.l	MAff,D1
	add.l	D0,D1
	move.l	D1,MAff

	pea	Video_Exp
	RTS
	
; /// On remonte d'un pixel M+2 ///
	
Up_Pixel	move.l	MAff,D0
	addq.l	#2,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS
	
; /// On descend d'un pixel M-2 ///
	
Down_Pixel	move.l	MAff,D0
	subq.l	#2,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS
	
; /// On descend de deux lignes M-2X ///
	
Down_2Line	move.w	XAff,D0
	addq.l	#1,D0
	mulu.w	#4,D0
	move.l	MAff,D1
	sub.l	D0,D1
	move.l	D1,MAff

	pea	Video_Exp
	RTS
	
; /// On descend d'une ligne M-X ///
	
Down_Line	move.w	XAff,D0
	addq.l	#1,D0
	mulu.w	#2,D0
	move.l	MAff,D1
	sub.l	D0,D1
	move.l	D1,MAff

	pea	Video_Exp
	RTS
	
; /// On remonte de deux pixels M+4 ///
	
Up_2Pixel	move.l	MAff,D0
	addq.l	#4,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS
	
; /// On descend de deux pixels M-4 ///
	
Down_2Pixel	move.l	MAff,D0
	subq.l	#4,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS
	
; /// On remonte d'un demi pixel M+1 ///
	
Up_HPixel	move.l	MAff,D0
	addq.l	#1,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS
	
; /// On descend d'un demi pixel M-1 ///
	
Donw_HPixel	move.l	MAff,D0
	subq.l	#1,D0
	move.l	D0,MAff

	pea	Video_Exp
	RTS

; /// Permet d'afficher une ligne en plus ///

Add_AffLine	move.w	YAff,D0
	cmpi.w	#239,D0
	BGE	End_AAL
	
	addq.w	#1,D0
	move.w	D0,YAff

End_AAL	pea	Video_Exp
	RTS
	
; /// Permet d'afficher une ligne en moins ///
	
Sub_AffLine	move.w	YAff,D0
	cmpi.w	#0,D0
	BLE	End_SAL

	subq.w	#1,D0
	move.w	D0,YAff

	BSR	Black_HLine

End_SAL	pea	Video_Exp
	RTS
	
; /// Permet d'afficher une ligne plus longue d'un pixel ///
	
Add_AffPixel	move.w	XAff,D0
	cmpi.w	#319,D0
	BGE	End_AAP
	
	addq.w	#1,D0
	move.w	D0,XAff

End_AAP	pea	Video_Exp
	RTS
	
; /// Permet d'afficher une ligne moins longue d'un pixel ///
	
Sub_AffPixel	move.w	XAff,D0
	cmpi.w	#0,D0
	BLE	End_SAP

	subq.w	#1,D0
	move.w	D0,XAff

	BSR	Black_VLine

End_SAP	pea	Video_Exp
	RTS
	
; /// On Affiche une ligne horizontale noire ///
	
Black_HLine	clr.l	D0
	move.w	YAff,D0
	addq.w	#1,D0
	mulu.l	#640,D0
	
	move.l	Screen_Addr,A0
	adda.l	D0,A0
	
	move.w	XAff,D0
HClr_Loop	clr.w	(A0)+
	DBF	D0,HClr_Loop

	RTS
	
; /// On affiche une ligne verticale noire ///

Black_VLine	clr.l	D0
	move.w	XAff,D0
	addq.w	#1,D0
	mulu.l	#2,D0

	move.l	Screen_Addr,A0
	adda.l	D0,A0
	
	move.l	#640,D1
	
	move.w	YAff,D0
VClr_Loop	clr.w	(A0)
	adda.l	D1,A0
	DBF	D0,VClr_Loop

	RTS

; /// On s'casse, finito... ///
	
Restore	move.w	Old_Mode,-(SP)
	move.w	#3,-(SP)
	clr.l	-(SP)
	clr.l	-(SP)
	move.w	#5,-(SP)		; - VSETSCREEN -
	trap	#14		; *** XBIOS ***
	lea	(14,SP),SP

	clr.w	-(SP)		; - P_TERM0 -
	trap	#1
	
; /// On sauve le bout d'‚cran affich‚ au format COKE TGA (16 Bits) ///
	
Save_COKE	clr.l	D0
	clr.l	D1
	lea	COKE_Header,A0
	
	move.w	XAff,D0
	addq.w	#1,D0
	
	move.w	D0,12(A0)		; On corrige le Header
	
	mulu.l	#2,D0
	move.w	YAff,D1
	addq.w	#1,D1
	
	move.w	D1,14(A0)		; On corrige le Header
	
	mulu.l	D1,D0
	move.l	D0,Pict_Size
	
	clr.w	-(SP)		; ST RAM Only
	move.l	D0,-(SP)
	move.w	#$44,-(SP)		; - M_XALLOC -
	trap	#1		; *** GEMDOS ***
	addq.l	#8,SP
	
	move.l	D0,Pict_Addr
	movea.l	D0,A1
	
	lea	TermFin_Data,A0
	move.l	MAff,D0
	adda.l	D0,A0
	
	move.w	YAff,D1
	
Y_Loop	move.w	XAff,D0
X_Loop	move.w	(A0)+,(A1)+
	DBF	D0,X_Loop
	DBF	D1,Y_Loop
	
	clr.w	-(SP)		; Single File
	pea	TermFin_Pict
	move.w	#$3C,-(SP)		; - F_CREATE -
	trap	#1		; *** GEMDOS ***
	addq.l	#8,SP
	
	move.w	D0,D6
	
	pea	COKE_Header
	move.l	#18,-(SP)
	move.w	D0,-(SP)
	move.w	#$40,-(SP)		; - F_WRITE -
	trap	#1		; *** GEMDOS ***
	lea	(12,SP),SP
	
	move.l	Pict_Addr,-(SP)
	move.l	Pict_Size,-(SP)
	move.w	D6,-(SP)
	move.w	#$40,-(SP)		; - F_WRITE -
	trap	#1		; *** GEMDOS ***
	lea	(12,SP),SP
	
	move.w	D6,-(SP)
	move.w	#$3E,-(SP)		; - F_CLOSE -
	trap	#1		; *** GEMDOS ***
	addq.l	#4,SP

	move.l	Pict_Addr,-(SP)
	move.w	#$49,-(SP)		; - M_FREE -
	trap	#1		; *** GEMDOS ***
	addq.l	#6,SP
	
	RTS

; /// Affiche la portion d‚sir‚e de donn‚es ///

Memory_Aff	lea	TermFin_Data,A0
	move.l	MAff,D0
	adda.l	D0,A0
	
	move.l	Screen_Addr,A1
	
	move.w	#319,D2
	move.w	XAff,D1
	sub.w	D1,D2
	mulu.w	#2,D2
	
	move.w	YAff,D1
	
Line_Loop	move.w	XAff,D0
Pixel_Loop	move.w	(A0)+,(A1)+
	DBF	D0,Pixel_Loop
	adda.l	D2,A1		; Ligne suivante
	DBF	D1,Line_Loop

	RTS

	SECTION	DATA
	
COKE_Header	dc.b	"COKE format.",0,0,0,0,0,$12
	
	SECTION	BSS
	
Old_Mode	ds.w	1		; Ancien mode vid‚o
XAff	ds.w	1		; Longueur d'une ligne … afficher
YAff	ds.w	1		; Nombre de lignes … afficher
MAff	ds.l	1		; OffSet affichage
DAff	ds.l	1		; Adresse des donn‚es
Screen_Addr	ds.l	1		; Adresse de l'‚cran
Pict_Addr	ds.l	1		; Adresse du buffer de l'image
Pict_Size	ds.l	1